name: DefectDojo Integration

on:
  workflow_dispatch:

env:
  DOJO_URL: http://localhost:8080
  DOJO_API_KEY: d75510fc3f6e64db9672d066daac9c50e7e74637
  DOJO_PRODUCT_ID: 1

jobs:
  defectdojo-import:
    runs-on: [self-hosted, dojo-runner]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Prepare report folders
        run: |
          mkdir -p security-reports reports-to-upload

      - name: Generate dummy findings JSON
        run: |
          cat > reports-to-upload/basic-findings.json << 'EOF'
          {
            "findings": [
              {
                "title": "Ejemplo de hallazgo de seguridad",
                "description": "Hallazgo de ejemplo desde GitHub Actions",
                "severity": "Medium",
                "date": "2023-05-30",
                "mitigation": "Implementar medidas recomendadas",
                "is_Mitigated": false,
                "impact": "Potencial exposición",
                "steps_to_reproduce": "Paso a paso…",
                "references": "https://owasp.org/Top10/"
              }
            ]
          }
          EOF

      - name: Import into DefectDojo
        env:
          DOJO_URL: ${{ env.DOJO_URL }}
          DOJO_API_KEY: ${{ env.DOJO_API_KEY }}
          DOJO_PRODUCT_ID: ${{ env.DOJO_PRODUCT_ID }}
        run: |
          set -o errexit
          echo "🔗 Verificando conexión con DefectDojo en $DOJO_URL …"
          curl -sfI "${DOJO_URL}/api/v2/" -H "Authorization: Token ${DOJO_API_KEY}"

          cat > dojo_integration.py << 'PYCODE'
          import os, sys, requests
          from datetime import datetime, timedelta

          dojo = os.getenv("DOJO_URL")
          key  = os.getenv("DOJO_API_KEY")
          pid  = os.getenv("DOJO_PRODUCT_ID")
          hdrs = {"Authorization": f"Token {key}", "Accept":"application/json"}

          # 1) Verificar producto
          r = requests.get(f"{dojo}/api/v2/products/{pid}/", headers=hdrs, verify=False)
          if r.status_code != 200:
              print("❌ Error producto:", r.status_code, r.text)
              sys.exit(1)

          # 2) Buscar o crear engagement
          q = requests.get(
              f"{dojo}/api/v2/engagements/?product={pid}&active=true",
              headers=hdrs, verify=False
          ).json()
          if q["count"] > 0:
              eid = q["results"][0]["id"]
              print(f"🔎 Engagement existente ID {eid}")
          else:
              today = datetime.now().date().isoformat()
              end   = (datetime.now() + timedelta(days=30)).date().isoformat()
              payload = {
                "name": f"GH Scan {today}",
                "description": "Importado desde Actions",
                "target_start": today,
                "target_end": end,
                "product": pid,
                "active": True,
                "status": "In Progress"
              }
              cr = requests.post(
                  f"{dojo}/api/v2/engagements/",
                  headers={**hdrs, "Content-Type":"application/json"},
                  json=payload,
                  verify=False
              )
              eid = cr.json().get("id")
              print(f"✅ Nuevo engagement creado ID {eid}")

          # 3) Importar findings
          with open("reports-to-upload/basic-findings.json","rb") as f:
              files = {"file": f}
              data  = {
                "scan_type": "Generic Findings Import",
                "engagement": str(eid),
                "active": "true",
                "verified": "false",
                "close_old_findings": "false"
              }
              im = requests.post(
                  f"{dojo}/api/v2/import-scan/",
                  headers={"Authorization": f"Token {key}"},
                  files=files,
                  data=data,
                  verify=False
              )
              print("📥 Import response:", im.status_code, im.text)
              if im.status_code not in (200, 201):
                  sys.exit(1)
          PYCODE

          python dojo_integration.py
