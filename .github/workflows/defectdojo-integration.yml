name: DefectDojo Integration

on:
  workflow_run:
    workflows: ["SAST Security Analysis", "CI/CD Pipeline"]
    types:
      - completed
  workflow_dispatch:  # Permite la activación manual

jobs:
  import-to-defectdojo:
    runs-on: ubuntu-latest
    # Se ejecuta si el workflow anterior tuvo éxito o si se activa manualmente
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      # Descargar resultados de análisis si están disponibles
      - name: Download artifacts from previous workflow
        id: download-artifacts
        uses: dawidd6/action-download-artifact@v2
        if: ${{ github.event_name == 'workflow_run' }}
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: success
          name: security-scan-results
          path: ./security-reports/
        continue-on-error: true
          
      # Verificar si se descargaron los artefactos y crear directorio si es necesario
      - name: Check artifacts and create directory
        run: |
          mkdir -p ./security-reports
          echo "Contenido del directorio de reportes:"
          ls -la ./security-reports/ || echo "Directorio vacío o no existe"
          
      # Obtener los artefactos del workflow de CI/CD si no se encontraron los del SAST
      - name: Download artifacts from CI/CD
        if: ${{ github.event_name == 'workflow_run' && steps.download-artifacts.outcome != 'success' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: "CI/CD Pipeline"
          workflow_conclusion: success
          name: security-analysis
          path: ./security-reports/
        continue-on-error: true
          
      # Importar resultados a DefectDojo
      - name: Import results to DefectDojo
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_PRODUCT_ID: ${{ secrets.DEFECTDOJO_PRODUCT_ID }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          # Verificar si las variables de entorno están configuradas
          if [ -z "$DEFECTDOJO_URL" ] || [ -z "$DEFECTDOJO_API_KEY" ] || [ -z "$DEFECTDOJO_ENGAGEMENT_ID" ]; then
            echo "AVISO: Las variables de entorno para DefectDojo no están configuradas. Saltando la importación."
            echo "Para configurar la integración, añade los siguientes secretos en GitHub:"
            echo "- DEFECTDOJO_URL: URL base de DefectDojo"
            echo "- DEFECTDOJO_API_KEY: Token API de DefectDojo"
            echo "- DEFECTDOJO_PRODUCT_ID: ID del producto en DefectDojo"
            echo "- DEFECTDOJO_ENGAGEMENT_ID: ID del engagement en DefectDojo"
            exit 0
          fi
          
          # Script para importar a DefectDojo
          cat > import_to_defectdojo.py << 'EOF'
          import os
          import requests
          import json
          import sys
          import glob
          
          # Configuración
          defectdojo_url = os.environ.get('DEFECTDOJO_URL')
          api_key = os.environ.get('DEFECTDOJO_API_KEY')
          product_id = os.environ.get('DEFECTDOJO_PRODUCT_ID')
          engagement_id = os.environ.get('DEFECTDOJO_ENGAGEMENT_ID')
          
          if not all([defectdojo_url, api_key, engagement_id]):
              print("Error: Se requieren todas las variables de entorno.")
              sys.exit(1)
          
          headers = {
              'Authorization': f'Token {api_key}',
              'Accept': 'application/json',
          }
          
          # Función para importar resultados
          def import_scan(file_path, scan_type):
              if not os.path.exists(file_path):
                  print(f"Archivo no encontrado: {file_path}")
                  return False
                  
              print(f"Importando {scan_type} desde {file_path}")
              
              # Verificar si el archivo tiene contenido válido
              try:
                  with open(file_path, 'r') as f:
                      content = f.read().strip()
                      if not content or content == '[]':
                          print(f"El archivo {file_path} está vacío o no tiene resultados")
                          return False
                      
                      # Intentar cargar como JSON para asegurar que es válido
                      json.loads(content)
              except Exception as e:
                  print(f"Error al validar el archivo {file_path}: {e}")
                  return False
                  
              import_url = f"{defectdojo_url}/api/v2/import-scan/"
              
              files = {'file': open(file_path, 'rb')}
              data = {
                  'scan_type': scan_type,
                  'engagement': engagement_id,
                  'verified': 'false',
                  'active': 'true',
                  'close_old_findings': 'true',
              }
              
              try:
                  response = requests.post(import_url, headers=headers, files=files, data=data)
                  if response.status_code in [200, 201]:
                      print(f"Importación exitosa: {scan_type}")
                      print(response.json())
                      return True
                  else:
                      print(f"Error en la importación: {response.status_code}")
                      print(response.text)
                      return False
              except Exception as e:
                  print(f"Excepción durante la importación: {e}")
                  return False
          
          # Buscar archivos de resultados
          reports_dir = "./security-reports"
          success = False
          
          # Buscar y procesar reportes de Bandit
          bandit_files = glob.glob(f"{reports_dir}/*bandit*.json")
          for bandit_file in bandit_files:
              if import_scan(bandit_file, "Bandit Scan"):
                  success = True
          
          # Buscar y procesar reportes de Safety
          safety_files = glob.glob(f"{reports_dir}/*safety*.json")
          for safety_file in safety_files:
              if import_scan(safety_file, "Safety Scan"):
                  success = True
          
          # Buscar y procesar reportes de pip-audit
          audit_files = glob.glob(f"{reports_dir}/*pip-audit*.json")
          for audit_file in audit_files:
              if import_scan(audit_file, "Dependency Scan"):
                  success = True
          
          # Buscar y procesar reportes de ZAP
          zap_files = glob.glob(f"{reports_dir}/*zap*.json")
          for zap_file in zap_files:
              if import_scan(zap_file, "ZAP Scan"):
                  success = True
          
          # Buscar y procesar reportes de cobertura
          coverage_files = glob.glob(f"{reports_dir}/*coverage*.xml")
          for coverage_file in coverage_files:
              if import_scan(coverage_file, "Coverage Scan"):
                  success = True
          
          if success:
              print("Al menos un escaneo fue importado correctamente a DefectDojo.")
              sys.exit(0)
          else:
              print("No se pudo importar ningún escaneo o no se encontraron archivos válidos.")
              
              # Listar los archivos encontrados
              print("\nArchivos encontrados en el directorio:")
              all_files = glob.glob(f"{reports_dir}/*")
              if all_files:
                  for f in all_files:
                      print(f"- {f}")
              else:
                  print("No se encontraron archivos en el directorio de reportes.")
              
              # No fallar el workflow, solo advertir
              sys.exit(0)
          EOF
          
          # Ejecutar el script
          python import_to_defectdojo.py
          echo "Proceso de integración con DefectDojo completado" 