name: Pipeline Integrado de Seguridad

on:
  push:
    branches: [ main, develop, feature/security_team7 ]
  pull_request:
    branches: [ develop, main ]
  schedule:
    - cron: '0 0 * * 1'  # Ejecución semanal (lunes)
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL a escanear en pruebas DAST'
        required: false
        default: 'http://localhost:8000'

jobs:
  # FASE 1: BUILD Y PRUEBAS BÁSICAS
  build-and-test:
    name: Construcción y Pruebas Básicas
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ejecutar pruebas
      run: |
        python manage.py test

  # FASE 2: ANÁLISIS DE CÓDIGO ESTÁTICO (SAST)
  sast-analysis:
    name: Análisis de Código Estático
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Inicializar el análisis de CodeQL
      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality
      
      # Ejecutar análisis de CodeQL
      - name: Analizar con CodeQL
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"
      
      # Ejecutar bandit para análisis específico de Python
      - name: Analizar con Bandit
        run: |
          pip install bandit
          bandit -r . -x ./venv,./tests -f json -o bandit-results.json
      
      - name: Subir resultados de Bandit
        uses: actions/upload-artifact@v3
        with:
          name: bandit-results
          path: bandit-results.json
      
      - name: Convertir resultados para DefectDojo
        run: |
          # Crear formato compatible con DefectDojo
          pip install requests
          
          python -c "
          import json
          import sys
          
          try:
              # Cargar resultados de Bandit
              with open('bandit-results.json') as f:
                  try:
                      bandit_data = json.load(f)
                  except json.JSONDecodeError:
                      bandit_data = {'results': []}
              
              findings = []
              
              # Procesar resultados de Bandit
              for result in bandit_data.get('results', []):
                  findings.append({
                      'title': f\"Bandit: {result.get('test_id', '')} - {result.get('test_name', '')}\",
                      'description': result.get('issue_text', ''),
                      'severity': 'High' if result.get('issue_severity', '') == 'HIGH' else
                                'Medium' if result.get('issue_severity', '') == 'MEDIUM' else 'Low',
                      'file_path': result.get('filename', ''),
                      'line': result.get('line_number', 0)
                  })
              
              # Guardar en formato para DefectDojo
              with open('security_findings.json', 'w') as f:
                  json.dump({'findings': findings}, f)
              
              print('Conversión completada con éxito')
          except Exception as e:
              print(f'Error en la conversión: {str(e)}')
              sys.exit(1)
          "
      
      - name: Subir resultados para DefectDojo
        uses: actions/upload-artifact@v3
        with:
          name: security-findings
          path: security_findings.json

  # FASE 3: ANÁLISIS DE DEPENDENCIAS (SCA)
  dependency-analysis:
    name: Análisis de Dependencias
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Ejecutar OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: dependency-check
        with:
          project: 'django-ecommerce-electrodomesticos'
          path: '.'
          format: 'ALL'
          out: './reports/dependency-check'
          args: >
            --failOnCVSS 7
            --enableRetired
            
      - name: Subir informe de vulnerabilidades
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./reports/dependency-check

  # FASE 4: ANÁLISIS DE SEGURIDAD EN INFRAESTRUCTURA (IAC)
  iac-security:
    name: Análisis de Seguridad en Infraestructura
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3
      
      - name: Ejecutar Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Subir resultados de Trivy
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results.sarif
          
      - name: Ejecutar Trivy para escaneo de configuración
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          
      - name: Subir resultados de análisis de configuración
        uses: actions/upload-artifact@v3
        with:
          name: trivy-config-results
          path: trivy-config-results.sarif

  # FASE 5: PRUEBAS DE SEGURIDAD ADICIONALES
  security-tests:
    name: Pruebas de Seguridad Adicionales
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit
          
      - name: Ejecutar tests de seguridad automatizados
        run: |
          python security_tests/security_checks.py || echo "Tests de seguridad no disponibles - continuando"
          
      - name: Subir resultados de seguridad
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            security-report.json
            
  # FASE 6: ANÁLISIS DINÁMICO DE SEGURIDAD (DAST) - Solo en entorno de desarrollo
  dast-testing:
    name: Análisis Dinámico de Seguridad
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-analysis, iac-security, security-tests]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/security_team7'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Preparar base de datos
        run: |
          python manage.py migrate
          echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'adminpassword')" | python manage.py shell
          
      - name: Iniciar servidor Django
        run: |
          python manage.py runserver &
          echo "Servidor iniciado en segundo plano"
          sleep 10
          
      - name: Ejecutar ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
      - name: Subir reporte ZAP
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-report
          path: |
            zap-baseline.html
            zap-baseline.xml

  # FASE 7: INTEGRACIÓN DE INFORMES CON DEFECTDOJO
  security-report-integration:
    name: Integración de Informes de Seguridad
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-analysis, iac-security, security-tests, dast-testing]
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Descargar todos los artefactos
        uses: actions/download-artifact@v3
        
      - name: Preparar envío a DefectDojo
        run: |
          echo "Preparando informes para su envío a DefectDojo"
          mkdir -p reports
          
          # Mover los artefactos a la carpeta de informes para su procesamiento
          [ -d "dependency-check-report" ] && mv dependency-check-report/* reports/ || echo "No hay informe de dependencias"
          [ -d "trivy-results" ] && mv trivy-results/* reports/ || echo "No hay informe de Trivy"
          [ -d "trivy-config-results" ] && mv trivy-config-results/* reports/ || echo "No hay informe de configuración de Trivy"
          [ -d "zap-scan-report" ] && mv zap-scan-report/* reports/ || echo "No hay informe de ZAP"
          [ -d "bandit-results" ] && mv bandit-results/* reports/ || echo "No hay informe de Bandit"
          [ -d "security-findings" ] && mv security-findings/* reports/ || echo "No hay informe de hallazgos de seguridad"
          [ -d "security-test-results" ] && mv security-test-results/* reports/ || echo "No hay informe de pruebas de seguridad"
          
      - name: Enviar informes a DefectDojo
        run: |
          echo "Enviando informes consolidados a DefectDojo"
          # Aquí iría el código para enviar los resultados a DefectDojo
          # Este paso se implementará en el futuro con los endpoints y tokens correspondientes
      
  # FASE 8: DESPLIEGUE (SOLO EN RAMAS ESPECÍFICAS)
  deploy-dev:
    needs: [sast-analysis, dependency-analysis, iac-security, security-tests, dast-testing]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy a desarrollo
        run: |
          echo "Desplegando a entorno de desarrollo"
          # Aquí irían los comandos para desplegar a desarrollo

  deploy-prod:
    needs: [sast-analysis, dependency-analysis, iac-security, security-tests, dast-testing]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy a producción
        run: |
          echo "Desplegando a entorno de producción"
          # Aquí irían los comandos para desplegar a producción
