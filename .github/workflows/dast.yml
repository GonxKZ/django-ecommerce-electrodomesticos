name: DAST Pipeline

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL a escanear'
        required: true
        default: 'http://localhost:8000'

jobs:
  zap-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Desplegar aplicación para pruebas
        run: |
          # Configurar entorno de prueba
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py migrate
          
          # Crear superusuario para pruebas
          echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'adminpassword')" | python manage.py shell
          
          # Iniciar servidor en segundo plano
          python manage.py runserver &
          echo "Servidor iniciado en segundo plano"
          sleep 10  # Esperar a que el servidor esté disponible

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Subir reporte ZAP
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-report
          path: |
            zap-baseline.html
            zap-baseline.xml

      - name: Enviar resultados a DefectDojo
        if: always()
        run: |
          echo "Enviando resultados a DefectDojo para su gestión"
          # Aquí iría el código para enviar los resultados a DefectDojo
          # curl -X POST -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" -F "file=@zap-baseline.xml" -F "scan_type=ZAP Scan" https://defectdojo.example.com/api/v2/import-scan/ 