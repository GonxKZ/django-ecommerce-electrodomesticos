name: DAST Security Analysis

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL de la aplicación para escanear'
        required: true
        default: 'http://localhost:8000'
      scan_type:
        description: 'Tipo de escaneo (baseline, api, full)'
        required: true
        default: 'baseline'
        type: choice
        options:
          - baseline
          - api
          - full
      environment:
        description: 'Entorno a analizar (desarrollo, producción, otro)'
        required: true
        default: 'desarrollo'
        type: choice
        options:
          - desarrollo
          - producción
          - staging
          - otro

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Crear directorio para reglas ZAP
        run: |
          mkdir -p .zap
          # Verificar si el archivo de reglas existe
          if [ ! -f .zap/rules.tsv ]; then
            echo "# Este archivo contiene reglas para el escáner ZAP" > .zap/rules.tsv
            echo "# Formato: [ID_REGLA]	[NIVEL_ALERTA: IGNORE, WARN o FAIL]	[DESCRIPCIÓN]" >> .zap/rules.tsv
          fi
      
      - name: Mostrar información del escaneo
        run: |
          echo "🚀 Iniciando escaneo DAST en ${{ github.event.inputs.environment || 'entorno local' }}"
          echo "🎯 URL objetivo: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}"
          echo "🔍 Tipo de escaneo: ${{ github.event.inputs.scan_type || 'baseline' }}"
          echo "⏱️ Fecha y hora: $(date)"
      
      # Escaneo ZAP en modo baseline (rápido)
      - name: ZAP Baseline Scan
        if: ${{ !github.event.inputs.scan_type || github.event.inputs.scan_type == 'baseline' }}
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: true
          fail_action: false
        continue-on-error: true
      
      # Escaneo ZAP en modo API
      - name: ZAP API Scan
        if: ${{ github.event.inputs.scan_type == 'api' }}
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          target: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: true
          fail_action: false
        continue-on-error: true
      
      # Escaneo ZAP completo (más lento pero más completo)
      - name: ZAP Full Scan
        if: ${{ github.event.inputs.scan_type == 'full' }}
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: true
          fail_action: false
        continue-on-error: true
      
      # Crear directorio para informes
      - name: Create reports directory
        run: mkdir -p ./dast-reports
      
      # Buscar y mover informes ZAP
      - name: Collect ZAP reports
        run: |
          # Buscar informes generados por ZAP
          find . -maxdepth 1 -name "zap-*-report.*" -exec cp {} ./dast-reports/ \; || true
          
          # Si no se encuentran informes, crear uno básico
          if [ -z "$(ls -A ./dast-reports 2>/dev/null)" ]; then
            echo "# Informe de Análisis DAST" > ./dast-reports/dast-report.txt
            echo "Ejecutado en: $(date)" >> ./dast-reports/dast-report.txt
            echo "\nNo se pudieron generar informes ZAP automáticamente." >> ./dast-reports/dast-report.txt
            echo "Esto puede deberse a que la URL objetivo no está accesible." >> ./dast-reports/dast-report.txt
            echo "\nURL objetivo: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}" >> ./dast-reports/dast-report.txt
            echo "Tipo de escaneo: ${{ github.event.inputs.scan_type || 'baseline' }}" >> ./dast-reports/dast-report.txt
          fi
      
      # Guardar el informe como artefacto
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: ./dast-reports/
      
      # Importar resultados a DefectDojo si están configurados los secretos
      - name: Import results to DefectDojo
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}
        run: |
          # Verificar si las variables de entorno están configuradas
          if [ -z "$DEFECTDOJO_URL" ] || [ -z "$DEFECTDOJO_API_KEY" ] || [ -z "$DEFECTDOJO_ENGAGEMENT_ID" ]; then
            echo "AVISO: Las variables de entorno para DefectDojo no están configuradas."
            echo "Los resultados del escaneo están disponibles como artefactos."
            exit 0
          fi
          
          # Instalar dependencias
          pip install requests
          
          # Obtener el informe JSON generado
          ZAP_REPORT=""
          for report in $(find ./dast-reports -name "*.json"); do
            ZAP_REPORT="$report"
            break
          done
          
          if [ -z "$ZAP_REPORT" ]; then
            echo "No se encontró ningún informe JSON de ZAP"
            exit 0
          fi
          
          # Script para importar a DefectDojo
          python - << EOF
          import os
          import requests
          import json
          
          # Configuración
          defectdojo_url = os.environ.get('DEFECTDOJO_URL')
          api_key = os.environ.get('DEFECTDOJO_API_KEY')
          engagement_id = os.environ.get('DEFECTDOJO_ENGAGEMENT_ID')
          report_file = "$ZAP_REPORT"
          
          headers = {
              'Authorization': f'Token {api_key}',
              'Accept': 'application/json',
          }
          
          # Importar resultados
          import_url = f"{defectdojo_url}/api/v2/import-scan/"
          
          files = {'file': open(report_file, 'rb')}
          data = {
              'scan_type': 'ZAP Scan',
              'engagement': engagement_id,
              'verified': 'false',
              'active': 'true',
              'close_old_findings': 'true',
          }
          
          try:
              response = requests.post(import_url, headers=headers, files=files, data=data)
              if response.status_code in [200, 201]:
                  print(f"Importación exitosa a DefectDojo")
                  print(response.json())
              else:
                  print(f"Error en la importación: {response.status_code}")
                  print(response.text)
          except Exception as e:
              print(f"Excepción durante la importación: {e}")
          EOF
          
          echo "Proceso de integración con DefectDojo completado" 